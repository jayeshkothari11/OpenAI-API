{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNtf4Sz16zpHAEpKYhnke9+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jayeshkothari11/OpenAI-API/blob/main/Data%20Visualization%20using%20Open%20AI%20API\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-4VFOUqbkmhD"
      },
      "outputs": [],
      "source": [
        "!pip install openai==0.28 python-dotenv"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import os\n",
        "import openai\n",
        "from dotenv import load_dotenv\n",
        "import json\n",
        "import re\n",
        "from google.colab import files"
      ],
      "metadata": {
        "id": "RrkFNtDeku7a"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "uploaded = files.upload()"
      ],
      "metadata": {
        "id": "Are5jDNnmufN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "load_dotenv(dotenv_path=\"apikey.env.txt\")\n",
        "APIKEY = os.getenv(\"APIKEY\")\n",
        "openai.api_key = APIKEY"
      ],
      "metadata": {
        "id": "ULQiEepLmyJU"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Defining CodeGenerate function"
      ],
      "metadata": {
        "id": "uGcYHRTAlna9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_chat_response(system_content,user_content):\n",
        "  # Create two message dictionaries, for system & user\n",
        "  system = {'role':'system', 'content': system_content}\n",
        "  user = {'role':'user', 'content' : user_content}\n",
        "  response = openai.ChatCompletion.create (\n",
        "      model = 'gpt-3.5-turbo',\n",
        "      messages=[system,user], # List of messages (system & user)\n",
        "      max_tokens = 1000  # limiting number of tokens in Response\n",
        "  )\n",
        "  return response"
      ],
      "metadata": {
        "id": "5giI2JGBlnLO"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Import Dataset"
      ],
      "metadata": {
        "id": "xfeWKfa6vcXK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "SuperStore_Data = pd.read_excel(\"EU Superstore.xls\")\n",
        "SuperStore_Data"
      ],
      "metadata": {
        "id": "ziGgSxxYvbho"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "What are the datatyoes in our dataset"
      ],
      "metadata": {
        "id": "SpQpYDWewolD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "SuperStore_Data.dtypes"
      ],
      "metadata": {
        "id": "KLs7oRONwrUG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lets do some **data prep** using the function we defined earlier\n",
        "\n",
        "1. Extract Month from the Order Date\n",
        "2. Calculate Profit Ratio\n"
      ],
      "metadata": {
        "id": "HJe5cbl7yqlv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Extract Month from the Order Date\n",
        "system_content = \"As a Python Developer, you will generate python code to solve given problem & provide solution. Please return only the code\"\n",
        "user_content = \"Write a python method which is without backticks & 'python' written called fetch_month_names that gets a pandas series containing some dates and returns a pandas series having month name of each date\"\n",
        "\n",
        "response = generate_chat_response(system_content, user_content)\n",
        "content = response.choices[0].message.content\n",
        "print(content)"
      ],
      "metadata": {
        "id": "MQlXudpKy0pL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lets Execute this code & get the column added in the original dataset"
      ],
      "metadata": {
        "id": "knEAVPUF1vLC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "code = content\n",
        "exec(code)\n",
        "SuperStore_Data['Order_Month']= fetch_month_names(SuperStore_Data.Order_Date)\n",
        "SuperStore_Data"
      ],
      "metadata": {
        "id": "UGECDlgs1xd5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate Profit Ratio\n",
        "system_content = \"As a Python Developer, you will generate python code to solve given problem & provide solution. You will return the Python code without the ``` delimiter\"\n",
        "user_content = \"Write a python method written called Profit_Ratio that gets a two variables  Sales & Profit & returns profit percentage and round it to two decimals\"\n",
        "\n",
        "response = generate_chat_response(system_content, user_content)\n",
        "content = response.choices[0].message.content\n",
        "print(content)\n"
      ],
      "metadata": {
        "id": "3W4eNdp-_K7T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lets Execute this code & get the column added in the original dataset"
      ],
      "metadata": {
        "id": "5aPhWi2V_6l9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "code = content\n",
        "exec(code)\n",
        "SuperStore_Data['profit_percentage']= Profit_Ratio(SuperStore_Data.Sales,SuperStore_Data.Profit)\n",
        "SuperStore_Data"
      ],
      "metadata": {
        "id": "ck30yYcI_7iT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Generate some **data visualizations (Bar Charts / Pie Charts / Line Charts)**"
      ],
      "metadata": {
        "id": "fQ-B3BH0Ixm-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "system_content = \"As a Python Developer, you will generate python code to solve given problem & provide solution. You will return the Python code without the ``` delimiter and sample code\"\n",
        "user_content = \"Write a python method called sales_per_day that aggregates the data based on two variables 'Order_Date' and 'Sales' and then draws a line chart to visualize the trend for last 6 months using seaborn library\"\n",
        "response = generate_chat_response(system_content, user_content)\n",
        "content = response.choices[0].message.content\n",
        "print(content)"
      ],
      "metadata": {
        "id": "gsPrHQl3I7T1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lets execute this code"
      ],
      "metadata": {
        "id": "LKnrE5KWK46A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "code = content\n",
        "exec(code)\n",
        "sales_per_day(SuperStore_Data)"
      ],
      "metadata": {
        "id": "fPVvf08RK6kp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create another chart based on something else"
      ],
      "metadata": {
        "id": "Wk7PYRm1TVGX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Lets check out dataframe again\n",
        "SuperStore_Data"
      ],
      "metadata": {
        "id": "ZwY5qGx-VT7g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "system_content = \"As a Python Developer, you will generate python code to solve given problem & provide solution. You will return the Python code without the ``` delimiter and do not add example code \"\n",
        "user_content = \"Write a python method called Sales_by_Category that aggregates the data based on two variables 'Category' and 'Sales' and then draws a Pie Chart to visualize the trend using plotly library.\"\n",
        "response = generate_chat_response(system_content, user_content)\n",
        "content = response.choices[0].message.content\n",
        "print(content)"
      ],
      "metadata": {
        "id": "cLYnIERmWZn4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Execute the code\n",
        "code = content\n",
        "exec(code)\n",
        "Sales_by_Category(SuperStore_Data)"
      ],
      "metadata": {
        "id": "8POJ88c7W39T"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}