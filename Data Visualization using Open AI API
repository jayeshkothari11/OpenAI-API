{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN25SoR/5UVCSb9j8YWJZ/r",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jayeshkothari11/OpenAI-API/blob/main/Data%20Visualization%20using%20Open%20AI%20API\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-4VFOUqbkmhD",
        "outputId": "cbce167b-dee9-48ba-c757-474106545d85"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting openai==0.28\n",
            "  Downloading openai-0.28.0-py3-none-any.whl.metadata (13 kB)\n",
            "Collecting python-dotenv\n",
            "  Downloading python_dotenv-1.0.1-py3-none-any.whl.metadata (23 kB)\n",
            "Requirement already satisfied: requests>=2.20 in /usr/local/lib/python3.10/dist-packages (from openai==0.28) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from openai==0.28) (4.66.5)\n",
            "Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from openai==0.28) (3.10.5)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.20->openai==0.28) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.20->openai==0.28) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.20->openai==0.28) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.20->openai==0.28) (2024.7.4)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai==0.28) (2.4.0)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai==0.28) (1.3.1)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai==0.28) (24.2.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai==0.28) (1.4.1)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai==0.28) (6.0.5)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai==0.28) (1.9.4)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai==0.28) (4.0.3)\n",
            "Downloading openai-0.28.0-py3-none-any.whl (76 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m76.5/76.5 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading python_dotenv-1.0.1-py3-none-any.whl (19 kB)\n",
            "Installing collected packages: python-dotenv, openai\n",
            "Successfully installed openai-0.28.0 python-dotenv-1.0.1\n"
          ]
        }
      ],
      "source": [
        "!pip install openai==0.28 python-dotenv"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import os\n",
        "import openai\n",
        "from dotenv import load_dotenv\n",
        "import json\n",
        "import re\n",
        "from google.colab import files"
      ],
      "metadata": {
        "id": "RrkFNtDeku7a"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "id": "Are5jDNnmufN",
        "outputId": "d91be0f9-a4ec-42f1-940a-72d55e9bc9bf"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a1645b0f-d120-433d-8d0f-22ca4d3bbece\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a1645b0f-d120-433d-8d0f-22ca4d3bbece\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving apikey.env.txt to apikey.env.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "load_dotenv(dotenv_path=\"apikey.env.txt\")\n",
        "APIKEY = os.getenv(\"APIKEY\")\n",
        "openai.api_key = APIKEY"
      ],
      "metadata": {
        "id": "ULQiEepLmyJU"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Defining CodeGenerate function"
      ],
      "metadata": {
        "id": "uGcYHRTAlna9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_chat_response(system_content,user_content):\n",
        "  # Create two message dictionaries, for system & user\n",
        "  system = {'role':'system', 'content': system_content}\n",
        "  user = {'role':'user', 'content' : user_content}\n",
        "  response = openai.ChatCompletion.create (\n",
        "      model = 'gpt-3.5-turbo',\n",
        "      messages=[system,user], # List of messages (system & user)\n",
        "      max_tokens = 1000  # limiting number of tokens in Response\n",
        "  )\n",
        "  return response"
      ],
      "metadata": {
        "id": "5giI2JGBlnLO"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Import Dataset"
      ],
      "metadata": {
        "id": "xfeWKfa6vcXK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "SuperStore_Data = pd.read_excel(\"EU Superstore.xls\")\n",
        "SuperStore_Data"
      ],
      "metadata": {
        "id": "ziGgSxxYvbho",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        },
        "outputId": "17922df6-3765-4a2f-a495-a3b1be62890f"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Order_ID Order_Date Dispatch_Date   Delivery_Mode Customer_ID  \\\n",
              "0     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "1     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "2     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "3     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "4     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "...               ...        ...           ...             ...         ...   \n",
              "9995  ES-2018-3780358 2018-11-16    2018-11-19     First Class    CC-12100   \n",
              "9996  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "9997  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "9998  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "9999  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "\n",
              "          Customer_Name      Segment     City State/Province  Country/Region  \\\n",
              "0        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "1        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "2        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "3        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "4        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "...                 ...          ...      ...            ...             ...   \n",
              "9995    Chad Cunningham  Home Office   Rovigo         Veneto           Italy   \n",
              "9996  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "9997  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "9998  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "9999  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "\n",
              "       Region       Product_ID         Category Sub-Category  \\\n",
              "0       North  OFF-ST-10000988  Office Supplies      Storage   \n",
              "1       North  TEC-AC-10004144       Technology  Accessories   \n",
              "2       North  OFF-LA-10001915  Office Supplies       Labels   \n",
              "3       North  OFF-ST-10004550  Office Supplies      Storage   \n",
              "4       North  TEC-AC-10004068       Technology  Accessories   \n",
              "...       ...              ...              ...          ...   \n",
              "9995    South  OFF-BI-10000346  Office Supplies      Binders   \n",
              "9996  Central  OFF-BI-10002083  Office Supplies      Binders   \n",
              "9997  Central  OFF-SU-10003211  Office Supplies     Supplies   \n",
              "9998  Central  TEC-PH-10001664       Technology       Phones   \n",
              "9999  Central  OFF-AR-10001228  Office Supplies          Art   \n",
              "\n",
              "                                    Product_Name   Sales  Quantity  Discount  \\\n",
              "0                         Fellowes Folders, Blue   79.20         3       0.0   \n",
              "1              SanDisk Numeric Keypad, Bluetooth  388.92         7       0.0   \n",
              "2     Avery Legal Exhibit Labels, 5000 Label Set   35.19         3       0.0   \n",
              "3                   Fellowes Folders, Wire Frame   50.94         2       0.0   \n",
              "4                       Memorex Memory Card, USB  307.44         3       0.0   \n",
              "...                                          ...     ...       ...       ...   \n",
              "9995                   Ibico 3-Hole Punch, Clear   59.82         2       0.0   \n",
              "9996           Acco Hole Reinforcements, Economy    6.66         1       0.0   \n",
              "9997                           Acme Ruler, Steel   96.66         6       0.0   \n",
              "9998             Motorola Office Telephone, VoIP  502.95         7       0.0   \n",
              "9999                Stanley Markers, Water Color  152.28         6       0.0   \n",
              "\n",
              "      Profit  \n",
              "0      39.60  \n",
              "1       0.00  \n",
              "2      16.11  \n",
              "3      13.20  \n",
              "4      73.71  \n",
              "...      ...  \n",
              "9995   23.88  \n",
              "9996    0.57  \n",
              "9997   28.98  \n",
              "9998  221.13  \n",
              "9999   50.22  \n",
              "\n",
              "[10000 rows x 19 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-161695eb-11fa-405b-aa5e-723c477de2d3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Order_ID</th>\n",
              "      <th>Order_Date</th>\n",
              "      <th>Dispatch_Date</th>\n",
              "      <th>Delivery_Mode</th>\n",
              "      <th>Customer_ID</th>\n",
              "      <th>Customer_Name</th>\n",
              "      <th>Segment</th>\n",
              "      <th>City</th>\n",
              "      <th>State/Province</th>\n",
              "      <th>Country/Region</th>\n",
              "      <th>Region</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Category</th>\n",
              "      <th>Sub-Category</th>\n",
              "      <th>Product_Name</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Discount</th>\n",
              "      <th>Profit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>North</td>\n",
              "      <td>OFF-ST-10000988</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Storage</td>\n",
              "      <td>Fellowes Folders, Blue</td>\n",
              "      <td>79.20</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>North</td>\n",
              "      <td>TEC-AC-10004144</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Accessories</td>\n",
              "      <td>SanDisk Numeric Keypad, Bluetooth</td>\n",
              "      <td>388.92</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>North</td>\n",
              "      <td>OFF-LA-10001915</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Labels</td>\n",
              "      <td>Avery Legal Exhibit Labels, 5000 Label Set</td>\n",
              "      <td>35.19</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>North</td>\n",
              "      <td>OFF-ST-10004550</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Storage</td>\n",
              "      <td>Fellowes Folders, Wire Frame</td>\n",
              "      <td>50.94</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>North</td>\n",
              "      <td>TEC-AC-10004068</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Accessories</td>\n",
              "      <td>Memorex Memory Card, USB</td>\n",
              "      <td>307.44</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>73.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>ES-2018-3780358</td>\n",
              "      <td>2018-11-16</td>\n",
              "      <td>2018-11-19</td>\n",
              "      <td>First Class</td>\n",
              "      <td>CC-12100</td>\n",
              "      <td>Chad Cunningham</td>\n",
              "      <td>Home Office</td>\n",
              "      <td>Rovigo</td>\n",
              "      <td>Veneto</td>\n",
              "      <td>Italy</td>\n",
              "      <td>South</td>\n",
              "      <td>OFF-BI-10000346</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Binders</td>\n",
              "      <td>Ibico 3-Hole Punch, Clear</td>\n",
              "      <td>59.82</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>23.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Central</td>\n",
              "      <td>OFF-BI-10002083</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Binders</td>\n",
              "      <td>Acco Hole Reinforcements, Economy</td>\n",
              "      <td>6.66</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Central</td>\n",
              "      <td>OFF-SU-10003211</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Supplies</td>\n",
              "      <td>Acme Ruler, Steel</td>\n",
              "      <td>96.66</td>\n",
              "      <td>6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>28.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Central</td>\n",
              "      <td>TEC-PH-10001664</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Phones</td>\n",
              "      <td>Motorola Office Telephone, VoIP</td>\n",
              "      <td>502.95</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>221.13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Central</td>\n",
              "      <td>OFF-AR-10001228</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Art</td>\n",
              "      <td>Stanley Markers, Water Color</td>\n",
              "      <td>152.28</td>\n",
              "      <td>6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>50.22</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 19 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-161695eb-11fa-405b-aa5e-723c477de2d3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-161695eb-11fa-405b-aa5e-723c477de2d3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-161695eb-11fa-405b-aa5e-723c477de2d3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a3353764-5206-4931-b247-b07ad6fe77d4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3353764-5206-4931-b247-b07ad6fe77d4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a3353764-5206-4931-b247-b07ad6fe77d4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_084c8fa3-750d-49dc-ba7e-f141078e017c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('SuperStore_Data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_084c8fa3-750d-49dc-ba7e-f141078e017c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('SuperStore_Data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "SuperStore_Data",
              "summary": "{\n  \"name\": \"SuperStore_Data\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"Order_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4596,\n        \"samples\": [\n          \"ES-2020-4858481\",\n          \"ES-2018-5867278\",\n          \"ES-2018-4314290\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Order_Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-01 00:00:00\",\n        \"max\": \"2021-12-31 00:00:00\",\n        \"num_unique_values\": 1253,\n        \"samples\": [\n          \"2020-12-26 00:00:00\",\n          \"2019-03-09 00:00:00\",\n          \"2019-04-03 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dispatch_Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-05 00:00:00\",\n        \"max\": \"2022-01-05 00:00:00\",\n        \"num_unique_values\": 1365,\n        \"samples\": [\n          \"2020-10-26 00:00:00\",\n          \"2020-12-19 00:00:00\",\n          \"2020-05-25 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delivery_Mode\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Second Class\",\n          \"First Class\",\n          \"Standard Class\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Customer_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 795,\n        \"samples\": [\n          \"EM-13825\",\n          \"MP-17470\",\n          \"GZ-14545\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Customer_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 795,\n        \"samples\": [\n          \"Elizabeth Moffitt\",\n          \"Mark Packer\",\n          \"George Zrebassa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Segment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Corporate\",\n          \"Consumer\",\n          \"Home Office\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1055,\n        \"samples\": [\n          \"Saint-Cloud\",\n          \"Plaisir\",\n          \"Oldenburg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State/Province\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 127,\n        \"samples\": [\n          \"Emilia-Romagna\",\n          \"Halland\",\n          \"Extremadura\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country/Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Ireland\",\n          \"Finland\",\n          \"United Kingdom\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"North\",\n          \"Central\",\n          \"South\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1915,\n        \"samples\": [\n          \"TEC-CO-10004147\",\n          \"TEC-PH-10000160\",\n          \"TEC-PH-10004707\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Office Supplies\",\n          \"Technology\",\n          \"Furniture\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sub-Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 17,\n        \"samples\": [\n          \"Storage\",\n          \"Accessories\",\n          \"Appliances\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1856,\n        \"samples\": [\n          \"Logitech Numeric Keypad, Bluetooth\",\n          \"Bush Stackable Bookrack, Traditional\",\n          \"Nokia Office Telephone, with Caller ID\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 486.05563455632546,\n        \"min\": 2.955,\n        \"max\": 7958.58,\n        \"num_unique_values\": 6604,\n        \"samples\": [\n          311.07,\n          807.597,\n          1309.203\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 14,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          9,\n          10,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Discount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1747817606084346,\n        \"min\": 0.0,\n        \"max\": 0.85,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.44999999999999996,\n          0.65,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 178.1003836507783,\n        \"min\": -3059.8199999999997,\n        \"max\": 3979.0799999999995,\n        \"num_unique_values\": 5673,\n        \"samples\": [\n          183.28799999999995,\n          32.099999999999994,\n          16.35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "What are the datatyoes in our dataset"
      ],
      "metadata": {
        "id": "SpQpYDWewolD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "SuperStore_Data.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "id": "KLs7oRONwrUG",
        "outputId": "eefa7a33-ade8-468e-fa1d-4b5e523b0064"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Order_ID                  object\n",
              "Order_Date        datetime64[ns]\n",
              "Dispatch_Date     datetime64[ns]\n",
              "Delivery_Mode             object\n",
              "Customer_ID               object\n",
              "Customer_Name             object\n",
              "Segment                   object\n",
              "City                      object\n",
              "State/Province            object\n",
              "Country/Region            object\n",
              "Region                    object\n",
              "Product_ID                object\n",
              "Category                  object\n",
              "Sub-Category              object\n",
              "Product_Name              object\n",
              "Sales                    float64\n",
              "Quantity                   int64\n",
              "Discount                 float64\n",
              "Profit                   float64\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Order_ID</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Order_Date</th>\n",
              "      <td>datetime64[ns]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Dispatch_Date</th>\n",
              "      <td>datetime64[ns]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Delivery_Mode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer_ID</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer_Name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Segment</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>State/Province</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country/Region</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Region</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_ID</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Category</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sub-Category</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sales</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Discount</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Profit</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lets do some **data prep** using the function we defined earlier\n",
        "\n",
        "1. Extract Month from the Order Date\n",
        "2. Calculate Profit Ratio\n"
      ],
      "metadata": {
        "id": "HJe5cbl7yqlv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Extract Month from the Order Date\n",
        "system_content = \"As a Python Developer, you will generate python code to solve given problem & provide solution. Please return only the code\"\n",
        "user_content = \"Write a python method which is without backticks & 'python' written called fetch_month_names that gets a pandas series containing some dates and returns a pandas series having month name of each date\"\n",
        "\n",
        "response = generate_chat_response(system_content, user_content)\n",
        "content = response.choices[0].message.content\n",
        "print(content)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MQlXudpKy0pL",
        "outputId": "dac1fcdf-664a-4d36-e019-05081e0fb8c9"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "import pandas as pd\n",
            "\n",
            "def fetch_month_names(dates_series):\n",
            "    month_names = dates_series.dt.month_name()\n",
            "    return month_names\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lets Execute this code & get the column added in the original dataset"
      ],
      "metadata": {
        "id": "knEAVPUF1vLC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "code = content\n",
        "exec(code)\n",
        "SuperStore_Data['Order_Month']= fetch_month_names(SuperStore_Data.Order_Date)\n",
        "SuperStore_Data"
      ],
      "metadata": {
        "id": "UGECDlgs1xd5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate Profit Ratio\n",
        "system_content = \"As a Python Developer, you will generate python code to solve given problem & provide solution. You will return the Python code without the ``` delimiter\"\n",
        "user_content = \"Write a python method written called Profit_Ratio that gets a two variables  Sales & Profit & returns profit percentage and round it to two decimals\"\n",
        "\n",
        "response = generate_chat_response(system_content, user_content)\n",
        "content = response.choices[0].message.content\n",
        "print(content)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3W4eNdp-_K7T",
        "outputId": "7b663305-991b-4e87-c6f8-507ac6dc1ef1"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "def Profit_Ratio(Sales, Profit):\n",
            "    profit_ratio = round((Profit / Sales) * 100, 2)\n",
            "    return profit_ratio\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lets Execute this code & get the column added in the original dataset"
      ],
      "metadata": {
        "id": "5aPhWi2V_6l9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "code = content\n",
        "exec(code)\n",
        "SuperStore_Data['profit_percentage']= Profit_Ratio(SuperStore_Data.Sales,SuperStore_Data.Profit)\n",
        "SuperStore_Data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 649
        },
        "id": "ck30yYcI_7iT",
        "outputId": "8311f0cc-4296-4d38-94de-acfd3b289362"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Order_ID Order_Date Dispatch_Date   Delivery_Mode Customer_ID  \\\n",
              "0     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "1     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "2     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "3     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "4     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "...               ...        ...           ...             ...         ...   \n",
              "9995  ES-2018-3780358 2018-11-16    2018-11-19     First Class    CC-12100   \n",
              "9996  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "9997  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "9998  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "9999  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "\n",
              "          Customer_Name      Segment     City State/Province  Country/Region  \\\n",
              "0        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "1        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "2        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "3        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "4        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "...                 ...          ...      ...            ...             ...   \n",
              "9995    Chad Cunningham  Home Office   Rovigo         Veneto           Italy   \n",
              "9996  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "9997  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "9998  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "9999  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "\n",
              "      ...       Product_ID         Category Sub-Category  \\\n",
              "0     ...  OFF-ST-10000988  Office Supplies      Storage   \n",
              "1     ...  TEC-AC-10004144       Technology  Accessories   \n",
              "2     ...  OFF-LA-10001915  Office Supplies       Labels   \n",
              "3     ...  OFF-ST-10004550  Office Supplies      Storage   \n",
              "4     ...  TEC-AC-10004068       Technology  Accessories   \n",
              "...   ...              ...              ...          ...   \n",
              "9995  ...  OFF-BI-10000346  Office Supplies      Binders   \n",
              "9996  ...  OFF-BI-10002083  Office Supplies      Binders   \n",
              "9997  ...  OFF-SU-10003211  Office Supplies     Supplies   \n",
              "9998  ...  TEC-PH-10001664       Technology       Phones   \n",
              "9999  ...  OFF-AR-10001228  Office Supplies          Art   \n",
              "\n",
              "                                    Product_Name   Sales  Quantity  Discount  \\\n",
              "0                         Fellowes Folders, Blue   79.20         3       0.0   \n",
              "1              SanDisk Numeric Keypad, Bluetooth  388.92         7       0.0   \n",
              "2     Avery Legal Exhibit Labels, 5000 Label Set   35.19         3       0.0   \n",
              "3                   Fellowes Folders, Wire Frame   50.94         2       0.0   \n",
              "4                       Memorex Memory Card, USB  307.44         3       0.0   \n",
              "...                                          ...     ...       ...       ...   \n",
              "9995                   Ibico 3-Hole Punch, Clear   59.82         2       0.0   \n",
              "9996           Acco Hole Reinforcements, Economy    6.66         1       0.0   \n",
              "9997                           Acme Ruler, Steel   96.66         6       0.0   \n",
              "9998             Motorola Office Telephone, VoIP  502.95         7       0.0   \n",
              "9999                Stanley Markers, Water Color  152.28         6       0.0   \n",
              "\n",
              "      Profit  Order_Month profit_percentage  \n",
              "0      39.60     February             50.00  \n",
              "1       0.00     February              0.00  \n",
              "2      16.11     February             45.78  \n",
              "3      13.20     February             25.91  \n",
              "4      73.71     February             23.98  \n",
              "...      ...          ...               ...  \n",
              "9995   23.88     November             39.92  \n",
              "9996    0.57      January              8.56  \n",
              "9997   28.98      January             29.98  \n",
              "9998  221.13      January             43.97  \n",
              "9999   50.22      January             32.98  \n",
              "\n",
              "[10000 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6f995e38-ef3a-49e7-aba9-da04d1b409a2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Order_ID</th>\n",
              "      <th>Order_Date</th>\n",
              "      <th>Dispatch_Date</th>\n",
              "      <th>Delivery_Mode</th>\n",
              "      <th>Customer_ID</th>\n",
              "      <th>Customer_Name</th>\n",
              "      <th>Segment</th>\n",
              "      <th>City</th>\n",
              "      <th>State/Province</th>\n",
              "      <th>Country/Region</th>\n",
              "      <th>...</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Category</th>\n",
              "      <th>Sub-Category</th>\n",
              "      <th>Product_Name</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Discount</th>\n",
              "      <th>Profit</th>\n",
              "      <th>Order_Month</th>\n",
              "      <th>profit_percentage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-ST-10000988</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Storage</td>\n",
              "      <td>Fellowes Folders, Blue</td>\n",
              "      <td>79.20</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39.60</td>\n",
              "      <td>February</td>\n",
              "      <td>50.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-AC-10004144</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Accessories</td>\n",
              "      <td>SanDisk Numeric Keypad, Bluetooth</td>\n",
              "      <td>388.92</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>February</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-LA-10001915</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Labels</td>\n",
              "      <td>Avery Legal Exhibit Labels, 5000 Label Set</td>\n",
              "      <td>35.19</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16.11</td>\n",
              "      <td>February</td>\n",
              "      <td>45.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-ST-10004550</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Storage</td>\n",
              "      <td>Fellowes Folders, Wire Frame</td>\n",
              "      <td>50.94</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.20</td>\n",
              "      <td>February</td>\n",
              "      <td>25.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-AC-10004068</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Accessories</td>\n",
              "      <td>Memorex Memory Card, USB</td>\n",
              "      <td>307.44</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>73.71</td>\n",
              "      <td>February</td>\n",
              "      <td>23.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>ES-2018-3780358</td>\n",
              "      <td>2018-11-16</td>\n",
              "      <td>2018-11-19</td>\n",
              "      <td>First Class</td>\n",
              "      <td>CC-12100</td>\n",
              "      <td>Chad Cunningham</td>\n",
              "      <td>Home Office</td>\n",
              "      <td>Rovigo</td>\n",
              "      <td>Veneto</td>\n",
              "      <td>Italy</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-BI-10000346</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Binders</td>\n",
              "      <td>Ibico 3-Hole Punch, Clear</td>\n",
              "      <td>59.82</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>23.88</td>\n",
              "      <td>November</td>\n",
              "      <td>39.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-BI-10002083</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Binders</td>\n",
              "      <td>Acco Hole Reinforcements, Economy</td>\n",
              "      <td>6.66</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.57</td>\n",
              "      <td>January</td>\n",
              "      <td>8.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-SU-10003211</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Supplies</td>\n",
              "      <td>Acme Ruler, Steel</td>\n",
              "      <td>96.66</td>\n",
              "      <td>6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>28.98</td>\n",
              "      <td>January</td>\n",
              "      <td>29.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-PH-10001664</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Phones</td>\n",
              "      <td>Motorola Office Telephone, VoIP</td>\n",
              "      <td>502.95</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>221.13</td>\n",
              "      <td>January</td>\n",
              "      <td>43.97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-AR-10001228</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Art</td>\n",
              "      <td>Stanley Markers, Water Color</td>\n",
              "      <td>152.28</td>\n",
              "      <td>6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>50.22</td>\n",
              "      <td>January</td>\n",
              "      <td>32.98</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f995e38-ef3a-49e7-aba9-da04d1b409a2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6f995e38-ef3a-49e7-aba9-da04d1b409a2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6f995e38-ef3a-49e7-aba9-da04d1b409a2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-52209772-ea40-4381-8337-46ad6867ca95\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-52209772-ea40-4381-8337-46ad6867ca95')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-52209772-ea40-4381-8337-46ad6867ca95 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9b45fce9-0e7c-4424-bf30-3bfa46fe7b30\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('SuperStore_Data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9b45fce9-0e7c-4424-bf30-3bfa46fe7b30 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('SuperStore_Data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "SuperStore_Data"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Generate some **data visualizations (Bar Charts / Pie Charts / Line Charts)**"
      ],
      "metadata": {
        "id": "fQ-B3BH0Ixm-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "system_content = \"As a Python Developer, you will generate python code to solve given problem & provide solution. You will return the Python code without the ``` delimiter and sample code\"\n",
        "user_content = \"Write a python method called sales_per_day that aggregates the data based on two variables 'Order_Date' and 'Sales' and then draws a line chart to visualize the trend for last 6 months using seaborn library\"\n",
        "response = generate_chat_response(system_content, user_content)\n",
        "content = response.choices[0].message.content\n",
        "print(content)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gsPrHQl3I7T1",
        "outputId": "d921f950-6678-4a9b-d3fd-a712a2976163"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "import pandas as pd\n",
            "import seaborn as sns\n",
            "import matplotlib.pyplot as plt\n",
            "\n",
            "def sales_per_day(data):\n",
            "    # Convert 'Order_Date' column to datetime format\n",
            "    data['Order_Date'] = pd.to_datetime(data['Order_Date'])\n",
            "    \n",
            "    # Group the data by 'Order_Date' and sum the 'Sales' for each day\n",
            "    daily_sales = data.groupby('Order_Date')['Sales'].sum().reset_index()\n",
            "    \n",
            "    # Filter data for last 6 months\n",
            "    last_6_months = daily_sales[daily_sales['Order_Date'] > daily_sales['Order_Date'].max() - pd.DateOffset(months=6)]\n",
            "    \n",
            "    # Draw a line chart to visualize the trend for last 6 months\n",
            "    plt.figure(figsize=(12, 6))\n",
            "    sns.lineplot(x='Order_Date', y='Sales', data=last_6_months)\n",
            "    plt.xlabel('Order Date')\n",
            "    plt.ylabel('Sales')\n",
            "    plt.title('Sales Trend for Last 6 Months')\n",
            "    plt.show()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lets execute this code"
      ],
      "metadata": {
        "id": "LKnrE5KWK46A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "code = content\n",
        "exec(code)\n",
        "sales_per_day(SuperStore_Data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "fPVvf08RK6kp",
        "outputId": "16c3b8f1-c02a-41c3-e5ec-4adb550d53a8"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create another chart based on"
      ],
      "metadata": {
        "id": "Wk7PYRm1TVGX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Lets check out dataframe again\n",
        "SuperStore_Data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 649
        },
        "id": "ZwY5qGx-VT7g",
        "outputId": "6b8a48d1-baf0-4925-97a8-b2bcc1d950ed"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Order_ID Order_Date Dispatch_Date   Delivery_Mode Customer_ID  \\\n",
              "0     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "1     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "2     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "3     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "4     ES-2021-1311038 2021-02-07    2021-02-11  Standard Class    AS-10045   \n",
              "...               ...        ...           ...             ...         ...   \n",
              "9995  ES-2018-3780358 2018-11-16    2018-11-19     First Class    CC-12100   \n",
              "9996  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "9997  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "9998  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "9999  ES-2019-5371207 2019-01-25    2019-01-29  Standard Class    GB-14575   \n",
              "\n",
              "          Customer_Name      Segment     City State/Province  Country/Region  \\\n",
              "0        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "1        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "2        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "3        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "4        Aaron Smayling    Corporate    Leeds        England  United Kingdom   \n",
              "...                 ...          ...      ...            ...             ...   \n",
              "9995    Chad Cunningham  Home Office   Rovigo         Veneto           Italy   \n",
              "9996  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "9997  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "9998  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "9999  Giulietta Baptist     Consumer  Hamburg        Hamburg         Germany   \n",
              "\n",
              "      ...       Product_ID         Category Sub-Category  \\\n",
              "0     ...  OFF-ST-10000988  Office Supplies      Storage   \n",
              "1     ...  TEC-AC-10004144       Technology  Accessories   \n",
              "2     ...  OFF-LA-10001915  Office Supplies       Labels   \n",
              "3     ...  OFF-ST-10004550  Office Supplies      Storage   \n",
              "4     ...  TEC-AC-10004068       Technology  Accessories   \n",
              "...   ...              ...              ...          ...   \n",
              "9995  ...  OFF-BI-10000346  Office Supplies      Binders   \n",
              "9996  ...  OFF-BI-10002083  Office Supplies      Binders   \n",
              "9997  ...  OFF-SU-10003211  Office Supplies     Supplies   \n",
              "9998  ...  TEC-PH-10001664       Technology       Phones   \n",
              "9999  ...  OFF-AR-10001228  Office Supplies          Art   \n",
              "\n",
              "                                    Product_Name   Sales  Quantity  Discount  \\\n",
              "0                         Fellowes Folders, Blue   79.20         3       0.0   \n",
              "1              SanDisk Numeric Keypad, Bluetooth  388.92         7       0.0   \n",
              "2     Avery Legal Exhibit Labels, 5000 Label Set   35.19         3       0.0   \n",
              "3                   Fellowes Folders, Wire Frame   50.94         2       0.0   \n",
              "4                       Memorex Memory Card, USB  307.44         3       0.0   \n",
              "...                                          ...     ...       ...       ...   \n",
              "9995                   Ibico 3-Hole Punch, Clear   59.82         2       0.0   \n",
              "9996           Acco Hole Reinforcements, Economy    6.66         1       0.0   \n",
              "9997                           Acme Ruler, Steel   96.66         6       0.0   \n",
              "9998             Motorola Office Telephone, VoIP  502.95         7       0.0   \n",
              "9999                Stanley Markers, Water Color  152.28         6       0.0   \n",
              "\n",
              "      Profit  Order_Month profit_percentage  \n",
              "0      39.60     February             50.00  \n",
              "1       0.00     February              0.00  \n",
              "2      16.11     February             45.78  \n",
              "3      13.20     February             25.91  \n",
              "4      73.71     February             23.98  \n",
              "...      ...          ...               ...  \n",
              "9995   23.88     November             39.92  \n",
              "9996    0.57      January              8.56  \n",
              "9997   28.98      January             29.98  \n",
              "9998  221.13      January             43.97  \n",
              "9999   50.22      January             32.98  \n",
              "\n",
              "[10000 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1ba07958-2e16-4247-ba63-c6b60c05b0ef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Order_ID</th>\n",
              "      <th>Order_Date</th>\n",
              "      <th>Dispatch_Date</th>\n",
              "      <th>Delivery_Mode</th>\n",
              "      <th>Customer_ID</th>\n",
              "      <th>Customer_Name</th>\n",
              "      <th>Segment</th>\n",
              "      <th>City</th>\n",
              "      <th>State/Province</th>\n",
              "      <th>Country/Region</th>\n",
              "      <th>...</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Category</th>\n",
              "      <th>Sub-Category</th>\n",
              "      <th>Product_Name</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Discount</th>\n",
              "      <th>Profit</th>\n",
              "      <th>Order_Month</th>\n",
              "      <th>profit_percentage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-ST-10000988</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Storage</td>\n",
              "      <td>Fellowes Folders, Blue</td>\n",
              "      <td>79.20</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39.60</td>\n",
              "      <td>February</td>\n",
              "      <td>50.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-AC-10004144</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Accessories</td>\n",
              "      <td>SanDisk Numeric Keypad, Bluetooth</td>\n",
              "      <td>388.92</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>February</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-LA-10001915</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Labels</td>\n",
              "      <td>Avery Legal Exhibit Labels, 5000 Label Set</td>\n",
              "      <td>35.19</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16.11</td>\n",
              "      <td>February</td>\n",
              "      <td>45.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-ST-10004550</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Storage</td>\n",
              "      <td>Fellowes Folders, Wire Frame</td>\n",
              "      <td>50.94</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.20</td>\n",
              "      <td>February</td>\n",
              "      <td>25.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ES-2021-1311038</td>\n",
              "      <td>2021-02-07</td>\n",
              "      <td>2021-02-11</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>AS-10045</td>\n",
              "      <td>Aaron Smayling</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>England</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-AC-10004068</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Accessories</td>\n",
              "      <td>Memorex Memory Card, USB</td>\n",
              "      <td>307.44</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>73.71</td>\n",
              "      <td>February</td>\n",
              "      <td>23.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>ES-2018-3780358</td>\n",
              "      <td>2018-11-16</td>\n",
              "      <td>2018-11-19</td>\n",
              "      <td>First Class</td>\n",
              "      <td>CC-12100</td>\n",
              "      <td>Chad Cunningham</td>\n",
              "      <td>Home Office</td>\n",
              "      <td>Rovigo</td>\n",
              "      <td>Veneto</td>\n",
              "      <td>Italy</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-BI-10000346</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Binders</td>\n",
              "      <td>Ibico 3-Hole Punch, Clear</td>\n",
              "      <td>59.82</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>23.88</td>\n",
              "      <td>November</td>\n",
              "      <td>39.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-BI-10002083</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Binders</td>\n",
              "      <td>Acco Hole Reinforcements, Economy</td>\n",
              "      <td>6.66</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.57</td>\n",
              "      <td>January</td>\n",
              "      <td>8.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-SU-10003211</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Supplies</td>\n",
              "      <td>Acme Ruler, Steel</td>\n",
              "      <td>96.66</td>\n",
              "      <td>6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>28.98</td>\n",
              "      <td>January</td>\n",
              "      <td>29.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>...</td>\n",
              "      <td>TEC-PH-10001664</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Phones</td>\n",
              "      <td>Motorola Office Telephone, VoIP</td>\n",
              "      <td>502.95</td>\n",
              "      <td>7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>221.13</td>\n",
              "      <td>January</td>\n",
              "      <td>43.97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>ES-2019-5371207</td>\n",
              "      <td>2019-01-25</td>\n",
              "      <td>2019-01-29</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>GB-14575</td>\n",
              "      <td>Giulietta Baptist</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Hamburg</td>\n",
              "      <td>Germany</td>\n",
              "      <td>...</td>\n",
              "      <td>OFF-AR-10001228</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Art</td>\n",
              "      <td>Stanley Markers, Water Color</td>\n",
              "      <td>152.28</td>\n",
              "      <td>6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>50.22</td>\n",
              "      <td>January</td>\n",
              "      <td>32.98</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ba07958-2e16-4247-ba63-c6b60c05b0ef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1ba07958-2e16-4247-ba63-c6b60c05b0ef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1ba07958-2e16-4247-ba63-c6b60c05b0ef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f5885e7a-f0ed-442d-9f68-cf22d53210ef\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f5885e7a-f0ed-442d-9f68-cf22d53210ef')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f5885e7a-f0ed-442d-9f68-cf22d53210ef button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f70cc21d-8c86-4e6f-8e8d-060ab0f3ceaf\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('SuperStore_Data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f70cc21d-8c86-4e6f-8e8d-060ab0f3ceaf button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('SuperStore_Data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "SuperStore_Data"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "system_content = \"As a Python Developer, you will generate python code to solve given problem & provide solution. You will return the Python code without the ``` delimiter and do not add example code \"\n",
        "user_content = \"Write a python method called Sales_by_Category that aggregates the data based on two variables 'Category' and 'Sales' and then draws a Pie Chart to visualize the trend using plotly library.\"\n",
        "response = generate_chat_response(system_content, user_content)\n",
        "content = response.choices[0].message.content\n",
        "print(content)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cLYnIERmWZn4",
        "outputId": "81ed84c1-218b-42a6-9e9e-54c1b6868e31"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "import plotly.express as px\n",
            "import pandas as pd\n",
            "\n",
            "def Sales_by_Category(data):\n",
            "    df = pd.DataFrame(data, columns=['Category', 'Sales'])\n",
            "    df = df.groupby('Category').sum().reset_index()\n",
            "    \n",
            "    fig = px.pie(df, values='Sales', names='Category', title='Sales by Category')\n",
            "    fig.show()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Execute the code\n",
        "code = content\n",
        "exec(code)\n",
        "Sales_by_Category(SuperStore_Data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "8POJ88c7W39T",
        "outputId": "aa7c8958-e5e7-4c9e-9bf0-0d4ddac3a4ab"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"ff90d3bd-143e-40df-9037-4056d22849b2\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"ff90d3bd-143e-40df-9037-4056d22849b2\")) {                    Plotly.newPlot(                        \"ff90d3bd-143e-40df-9037-4056d22849b2\",                        [{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"hovertemplate\":\"Category=%{label}\\u003cbr\\u003eSales=%{value}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"labels\":[\"Furniture\",\"Office Supplies\",\"Technology\"],\"legendgroup\":\"\",\"name\":\"\",\"showlegend\":true,\"values\":[779103.0495,1046307.024,1112678.9880000001],\"type\":\"pie\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Sales by Category\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('ff90d3bd-143e-40df-9037-4056d22849b2');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}